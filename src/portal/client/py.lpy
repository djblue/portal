(ns portal.client.py
  (:require [basilisp.json :as json]
            [portal.runtime.cson :as cson])
  (:import [urllib.request :as request]))

(defn- ->headers [headers]
  (persistent!
   (reduce
    (fn [out [k v]]
      (assoc! out k v))
    (transient {})
    (.items headers))))

(defn- ->response [response]
  {:status  (.-status response)
   :headers (->headers (.-headers response))
   :body    (.. response (read) (decode "utf-8"))})

(defn request [{:keys [url method body headers]
                :or   {method :get}}]
  (let [method (case method
                 :get "GET"
                 :post "POST"
                 :put "PUT"
                 :delete "DELETE")
        req (request/Request
             url **
             :method method
             :data (some-> body (.encode "utf-8")))]
    (doseq [[k v] headers] (.add_header req k v))
    (->response (request/urlopen req))))

(defn- serialize [encoding value]
  (try
    (case encoding
      :json (json/write-str  value)
      :edn  (binding [*print-meta* true]
              (pr-str value))
      :cson (cson/write value))
    (catch Exception ex
      (serialize
       encoding
       {:cause "Error"
        :message (ex-message ex)
        :data (ex-data ex)}))))

(defn submit
  ([value] (submit nil value))
  ([{:keys [encoding port host]
     :or   {encoding :edn
            host     "localhost"
            port     53755}}
    value]
   (request
    {:url (str "http://" host ":" port "/submit")
     :method :post
     :headers
     {"content-type"
      (case encoding
        :json    "application/json"
        :cson    "application/cson"
        :transit "application/transit+json"
        :edn     "application/edn")}
     :body (serialize encoding value)})))