(ns portal.test-runner
  (:require [clojure.test :as t]
            [clojure.string :as str]
            [portal.runtime.fs :as fs])
  (:import [sys :as sys]
           [os :as os]))

(defn- load-test [ns]
  @(future
     (load-file
      (str
       (fs/join (fs/cwd)
                "test"
                (str/join "/" (str/split (str/replace (name ns) #"-" "_") #"\\.")))
       ".cljc"))))

(defn- ->source [v]
  (let [{:keys [file line col]} (meta v)]
    (str file ":" line ":" col)))

(defn- run-tests [& tests]
  (let [summary (atom {:error 0 :fail 0})
        report (atom [])]
    (doseq [test-ns tests]
      (swap! report conj {:type :begin-test-ns :ns test-ns})
      (load-test test-ns)
      (println "\nTesting" (name test-ns))
      (doseq [[_s v] (ns-publics test-ns)
              :when (::t/test (meta v))]
        (swap! report conj {:type :begin-test-var :var v})
        (try
          (let [failures (:failures (v))]
            (swap! summary update :fail + (count failures))
            (doseq [failure failures]
              (println "\nFAIL in" (str "(" (name v) ")") (->source v))
              (println "expected:" (:expected failure))
              (println "  actual:" (:actual failure))
              (swap! report conj (merge {:type :fail} (select-keys failure [:message :actual :expected])))))
          (catch Exception e
            (swap! report conj (merge {:type :error} {:message (ex-message e) :data (ex-data e)}))
            (swap! summary update :error inc)
            e))
        (swap! report conj {:type :end-test-var :var v}))
      (swap! report conj {:type :end-test-ns :ns test-ns}))
    (println "\nRan all tests.")
    (println (:fail @summary) "failures" (:error @summary) "errors.")
    #_(prn @report)
    @summary))

(defn -main []
  (let [{:keys [fail error]}
        (run-tests
         'portal.runtime.cson-test
         'portal.runtime.fs-test
         'portal.runtime.json-buffer-test
         'portal.runtime.npm-test
         'portal.runtime.shell-test
         'portal.client-test
         'portal.runtime-test
         'portal.runtime.api-test)]
    (sys/exit (+ fail error))))

(-main)